type Account @entity {
  # address
  id: ID!

  bids: [AuctionBid!]! @derivedFrom(field: "bidder")
  tokens: [Token!]! @derivedFrom(field: "owner")

  votes: [Vote!]! @derivedFrom(field: "voter")
  submittedProposals: [Proposal!]! @derivedFrom(field: "submitter")

  delegations: [Delegation!]! @derivedFrom(field: "voter")
  delegatedBy: [Delegation!]! @derivedFrom(field: "delegatedTo")
}

type DAO @entity {
  # tokenContractAddress
  id: ID!
  creationTxHash: Bytes!

  tokenContract: TokenContract! @derivedFrom(field: "DAO")
  auctionContract: AuctionContract! @derivedFrom(field: "DAO")
  metadataContract: MetadataContract! @derivedFrom(field: "DAO")
  governorContract: GovernorContract! @derivedFrom(field: "DAO")
  treasuryContract: TreasuryContract! @derivedFrom(field: "DAO")
}

#####  TOKEN  #####
type TokenContract @entity {
  # tokenContractAddress
  id: ID!

  # address that manages this contract
  owner: String!
  name: String!
  symbol: String!
  totalSupply: BigInt!
  contractURI: String!

  DAO: DAO!
  auctionContract: AuctionContract!
  founders: [DAOFounder!]! @derivedFrom(field: "tokenContract")
  tokens: [Token!]! @derivedFrom(field: "tokenContract")
  delegations: [Delegation!]! @derivedFrom(field: "tokenContract")
}

#####  TOKEN  #####
type DAOFounder @entity {
  # tokenContractAddress.concat(-userAddress)
  id: ID!
  ownershipPercentage: BigInt!
  vestExpiry: BigInt!

  tokenContract: TokenContract!
  account: Account!
}

#####  TOKEN  #####
# ERC721
type Token @entity {
  # tokenContractAddress.concat(-tokenId)
  id: ID!
  tokenId: BigInt!

  # set after auction settled
  tokenURI: String
  owner: Account

  tokenContract: TokenContract!
  auction: Auction!
}

#####  TOKEN  #####
# if a user has multiple DAO tokens, all of their votes use this delegation
type Delegation @entity {
  # voterAddress.concat(-tokenContractAddress)
  id: ID!

  tokenContract: TokenContract!

  # if voter === delegatedTo, voter self-assigned
  voter: Account! # address of voter
  delegatedTo: Account! # address of chosen delegate
}

##### METADATA #####
type MetadataContract @entity {
  id: ID! # metadataContractAddress
  websiteURL: String! # projectURI
  description: String!
  contractImage: String!
  rendererBase: String!

  properties: [Property!]! @derivedFrom(field: "metadataContract")
  DAO: DAO!
}

##### METADATA #####
# each DAO Token can have 0-15 properties that determine the appearance -
# - of randomly generated NFTs
# additionalProperties may be set, these are applied to the whole collection
type Property @entity {
  # metadataContract.concat(-propertyId || propertyKey)
  id: ID!
  name: String!

  # additionalTokenProperties
  value: String
  quote: Boolean

  metadataContract: MetadataContract!
}

##### AUCTION  #####
type AuctionContract @entity {
  id: ID! # auctionContractAddress
  # address that manages this contract
  owner: String!
  reservePrice: BigInt!
  duration: BigInt!
  timeBuffer: BigInt!
  minBidIncrement: BigInt!
  paused: Boolean!

  DAO: DAO!
  tokenContract: TokenContract!

  # daily (or other interval) auctions
  auctions: [Auction!]! @derivedFrom(field: "auctionContract")
}

##### AUCTION  #####
# daily (or other interval) auctions
type Auction @entity {
  # auctionContractAddress.concat(-tokenId)
  id: ID!

  settled: Boolean!
  startTime: BigInt!
  endTime: BigInt!

  # set after auction settled
  winner: Account
  winningBid: AuctionBid

  auctionContract: AuctionContract!

  token: Token @derivedFrom(field: "auction")
  bids: [AuctionBid!]! @derivedFrom(field: "auction")
}

##### AUCTION  #####
type AuctionBid @entity(immutable: true) {
  # txHash
  id: ID!

  amount: BigInt!
  extended: Boolean!
  blockTimestamp: BigInt!

  auction: Auction!
  bidder: Account!
}

##### GOVERNOR #####
type GovernorContract @entity {
  # governorContractAddress
  id: ID!

  # address that manages this contract
  owner: String!
  vetoEnabled: Boolean!
  vetoerAddress: Bytes!
  votingDelay: BigInt!
  votingPeriod: BigInt!

  # bps
  proposalThreshold: BigInt!
  quoromThreshold: BigInt!

  nextProposalNumber: BigInt!

  proposals: [Proposal!]! @derivedFrom(field: "governorContract")
  tokenContract: TokenContract!
  DAO: DAO!
}

##### GOVERNOR #####
type Proposal @entity {
  # proposalId
  id: ID!
  number: BigInt!
  title: String
  description: String!
  descriptionHash: Bytes!
  creationTxHash: Bytes!
  blockTimestamp: BigInt!

  forVotes: BigInt!
  againstVotes: BigInt!
  abstainVotes: BigInt!

  targets: [String!]!
  values: [BigInt!]!
  calldatas: [Bytes!]!

  status: ProposalStatus!
  governorContract: GovernorContract!
  submitter: Account!

  votes: [Vote!]! @derivedFrom(field: "proposal")
}

##### GOVERNOR #####
type Vote @entity {
  id: ID! # txHash
  supported: VoteType!
  reason: String!
  weight: BigInt!
  blockTimestamp: BigInt!

  proposal: Proposal!
  voter: Account!
}

##### TREASURY #####
type TreasuryContract @entity {
  # treasuryContractAddress
  id: ID!

  # address that manages this contract
  owner: String!
  delay: BigInt!
  gracePeriod: BigInt!

  transactions: [TreasuryTransaction!]! @derivedFrom(field: "treasuryContract")
  DAO: DAO!
}

##### TREASURY #####
type TreasuryTransaction @entity {
  # txHash
  id: ID!
  etaTimestamp: BigInt!
  creationTxHash: Bytes!

  # optional
  executedTimestamp: BigInt
  executedHash: Bytes

  status: TreasuryTxStatus!
  treasuryContract: TreasuryContract!
  proposal: Proposal!
}

##### GOVERNOR #####
enum ProposalStatus {
  PENDING
  ACTIVE
  CANCELLED
  VETOED
  QUEUED
  EXECUTED
}

##### GOVERNOR #####
enum VoteType {
  FOR
  AGAINST
  ABSTAIN
}

##### TREASURY #####
enum TreasuryTxStatus {
  SCHEDULED
  CANCELLED
  EXECUTED
}
