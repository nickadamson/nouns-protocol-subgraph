// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GovernorInitialized extends ethereum.Event {
  get params(): GovernorInitialized__Params {
    return new GovernorInitialized__Params(this);
  }
}

export class GovernorInitialized__Params {
  _event: GovernorInitialized;

  constructor(event: GovernorInitialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class GovernorOwnerCanceled extends ethereum.Event {
  get params(): GovernorOwnerCanceled__Params {
    return new GovernorOwnerCanceled__Params(this);
  }
}

export class GovernorOwnerCanceled__Params {
  _event: GovernorOwnerCanceled;

  constructor(event: GovernorOwnerCanceled) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get canceledOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GovernorOwnerPending extends ethereum.Event {
  get params(): GovernorOwnerPending__Params {
    return new GovernorOwnerPending__Params(this);
  }
}

export class GovernorOwnerPending__Params {
  _event: GovernorOwnerPending;

  constructor(event: GovernorOwnerPending) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pendingOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class GovernorOwnerUpdated extends ethereum.Event {
  get params(): GovernorOwnerUpdated__Params {
    return new GovernorOwnerUpdated__Params(this);
  }
}

export class GovernorOwnerUpdated__Params {
  _event: GovernorOwnerUpdated;

  constructor(event: GovernorOwnerUpdated) {
    this._event = event;
  }

  get prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposalCanceled extends ethereum.Event {
  get params(): ProposalCanceled__Params {
    return new ProposalCanceled__Params(this);
  }
}

export class ProposalCanceled__Params {
  _event: ProposalCanceled;

  constructor(event: ProposalCanceled) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ProposalCreated extends ethereum.Event {
  get params(): ProposalCreated__Params {
    return new ProposalCreated__Params(this);
  }
}

export class ProposalCreated__Params {
  _event: ProposalCreated;

  constructor(event: ProposalCreated) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get targets(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get calldatas(): Array<Bytes> {
    return this._event.parameters[3].value.toBytesArray();
  }

  get description(): string {
    return this._event.parameters[4].value.toString();
  }

  get descriptionHash(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get proposal(): ProposalCreatedProposalStruct {
    return changetype<ProposalCreatedProposalStruct>(
      this._event.parameters[6].value.toTuple()
    );
  }
}

export class ProposalCreatedProposalStruct extends ethereum.Tuple {
  get proposer(): Address {
    return this[0].toAddress();
  }

  get timeCreated(): BigInt {
    return this[1].toBigInt();
  }

  get againstVotes(): BigInt {
    return this[2].toBigInt();
  }

  get forVotes(): BigInt {
    return this[3].toBigInt();
  }

  get abstainVotes(): BigInt {
    return this[4].toBigInt();
  }

  get voteStart(): BigInt {
    return this[5].toBigInt();
  }

  get voteEnd(): BigInt {
    return this[6].toBigInt();
  }

  get proposalThreshold(): BigInt {
    return this[7].toBigInt();
  }

  get quorumVotes(): BigInt {
    return this[8].toBigInt();
  }

  get executed(): boolean {
    return this[9].toBoolean();
  }

  get canceled(): boolean {
    return this[10].toBoolean();
  }

  get vetoed(): boolean {
    return this[11].toBoolean();
  }
}

export class ProposalExecuted extends ethereum.Event {
  get params(): ProposalExecuted__Params {
    return new ProposalExecuted__Params(this);
  }
}

export class ProposalExecuted__Params {
  _event: ProposalExecuted;

  constructor(event: ProposalExecuted) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ProposalQueued extends ethereum.Event {
  get params(): ProposalQueued__Params {
    return new ProposalQueued__Params(this);
  }
}

export class ProposalQueued__Params {
  _event: ProposalQueued;

  constructor(event: ProposalQueued) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get eta(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProposalThresholdBpsUpdated extends ethereum.Event {
  get params(): ProposalThresholdBpsUpdated__Params {
    return new ProposalThresholdBpsUpdated__Params(this);
  }
}

export class ProposalThresholdBpsUpdated__Params {
  _event: ProposalThresholdBpsUpdated;

  constructor(event: ProposalThresholdBpsUpdated) {
    this._event = event;
  }

  get prevBps(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newBps(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProposalVetoed extends ethereum.Event {
  get params(): ProposalVetoed__Params {
    return new ProposalVetoed__Params(this);
  }
}

export class ProposalVetoed__Params {
  _event: ProposalVetoed;

  constructor(event: ProposalVetoed) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class QuorumVotesBpsUpdated extends ethereum.Event {
  get params(): QuorumVotesBpsUpdated__Params {
    return new QuorumVotesBpsUpdated__Params(this);
  }
}

export class QuorumVotesBpsUpdated__Params {
  _event: QuorumVotesBpsUpdated;

  constructor(event: QuorumVotesBpsUpdated) {
    this._event = event;
  }

  get prevBps(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newBps(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GovernorUpgraded extends ethereum.Event {
  get params(): GovernorUpgraded__Params {
    return new GovernorUpgraded__Params(this);
  }
}

export class GovernorUpgraded__Params {
  _event: GovernorUpgraded;

  constructor(event: GovernorUpgraded) {
    this._event = event;
  }

  get impl(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VetoerUpdated extends ethereum.Event {
  get params(): VetoerUpdated__Params {
    return new VetoerUpdated__Params(this);
  }
}

export class VetoerUpdated__Params {
  _event: VetoerUpdated;

  constructor(event: VetoerUpdated) {
    this._event = event;
  }

  get prevVetoer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newVetoer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VoteCast extends ethereum.Event {
  get params(): VoteCast__Params {
    return new VoteCast__Params(this);
  }
}

export class VoteCast__Params {
  _event: VoteCast;

  constructor(event: VoteCast) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get support(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class VotingDelayUpdated extends ethereum.Event {
  get params(): VotingDelayUpdated__Params {
    return new VotingDelayUpdated__Params(this);
  }
}

export class VotingDelayUpdated__Params {
  _event: VotingDelayUpdated;

  constructor(event: VotingDelayUpdated) {
    this._event = event;
  }

  get prevVotingDelay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVotingDelay(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VotingPeriodUpdated extends ethereum.Event {
  get params(): VotingPeriodUpdated__Params {
    return new VotingPeriodUpdated__Params(this);
  }
}

export class VotingPeriodUpdated__Params {
  _event: VotingPeriodUpdated;

  constructor(event: VotingPeriodUpdated) {
    this._event = event;
  }

  get prevVotingPeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVotingPeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Governor__getProposalResultValue0Struct extends ethereum.Tuple {
  get proposer(): Address {
    return this[0].toAddress();
  }

  get timeCreated(): BigInt {
    return this[1].toBigInt();
  }

  get againstVotes(): BigInt {
    return this[2].toBigInt();
  }

  get forVotes(): BigInt {
    return this[3].toBigInt();
  }

  get abstainVotes(): BigInt {
    return this[4].toBigInt();
  }

  get voteStart(): BigInt {
    return this[5].toBigInt();
  }

  get voteEnd(): BigInt {
    return this[6].toBigInt();
  }

  get proposalThreshold(): BigInt {
    return this[7].toBigInt();
  }

  get quorumVotes(): BigInt {
    return this[8].toBigInt();
  }

  get executed(): boolean {
    return this[9].toBoolean();
  }

  get canceled(): boolean {
    return this[10].toBoolean();
  }

  get vetoed(): boolean {
    return this[11].toBoolean();
  }
}

export class Governor__proposalVotesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class Governor extends ethereum.SmartContract {
  static bind(address: Address): Governor {
    return new Governor("Governor", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_PROPOSAL_THRESHOLD_BPS(): BigInt {
    let result = super.call(
      "MAX_PROPOSAL_THRESHOLD_BPS",
      "MAX_PROPOSAL_THRESHOLD_BPS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_PROPOSAL_THRESHOLD_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_PROPOSAL_THRESHOLD_BPS",
      "MAX_PROPOSAL_THRESHOLD_BPS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_QUORUM_THRESHOLD_BPS(): BigInt {
    let result = super.call(
      "MAX_QUORUM_THRESHOLD_BPS",
      "MAX_QUORUM_THRESHOLD_BPS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_QUORUM_THRESHOLD_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_QUORUM_THRESHOLD_BPS",
      "MAX_QUORUM_THRESHOLD_BPS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_VOTING_DELAY(): BigInt {
    let result = super.call(
      "MAX_VOTING_DELAY",
      "MAX_VOTING_DELAY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_VOTING_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_VOTING_DELAY",
      "MAX_VOTING_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_VOTING_PERIOD(): BigInt {
    let result = super.call(
      "MAX_VOTING_PERIOD",
      "MAX_VOTING_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_VOTING_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_VOTING_PERIOD",
      "MAX_VOTING_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_PROPOSAL_THRESHOLD_BPS(): BigInt {
    let result = super.call(
      "MIN_PROPOSAL_THRESHOLD_BPS",
      "MIN_PROPOSAL_THRESHOLD_BPS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_PROPOSAL_THRESHOLD_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_PROPOSAL_THRESHOLD_BPS",
      "MIN_PROPOSAL_THRESHOLD_BPS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_QUORUM_THRESHOLD_BPS(): BigInt {
    let result = super.call(
      "MIN_QUORUM_THRESHOLD_BPS",
      "MIN_QUORUM_THRESHOLD_BPS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_QUORUM_THRESHOLD_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_QUORUM_THRESHOLD_BPS",
      "MIN_QUORUM_THRESHOLD_BPS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_VOTING_DELAY(): BigInt {
    let result = super.call(
      "MIN_VOTING_DELAY",
      "MIN_VOTING_DELAY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_VOTING_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_VOTING_DELAY",
      "MIN_VOTING_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_VOTING_PERIOD(): BigInt {
    let result = super.call(
      "MIN_VOTING_PERIOD",
      "MIN_VOTING_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_VOTING_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_VOTING_PERIOD",
      "MIN_VOTING_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VOTE_TYPEHASH(): Bytes {
    let result = super.call("VOTE_TYPEHASH", "VOTE_TYPEHASH():(bytes32)", []);

    return result[0].toBytes();
  }

  try_VOTE_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "VOTE_TYPEHASH",
      "VOTE_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  castVote(_proposalId: Bytes, _support: BigInt): BigInt {
    let result = super.call("castVote", "castVote(bytes32,uint256):(uint256)", [
      ethereum.Value.fromFixedBytes(_proposalId),
      ethereum.Value.fromUnsignedBigInt(_support)
    ]);

    return result[0].toBigInt();
  }

  try_castVote(
    _proposalId: Bytes,
    _support: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVote",
      "castVote(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_proposalId),
        ethereum.Value.fromUnsignedBigInt(_support)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  castVoteBySig(
    _voter: Address,
    _proposalId: Bytes,
    _support: BigInt,
    _deadline: BigInt,
    _v: i32,
    _r: Bytes,
    _s: Bytes
  ): BigInt {
    let result = super.call(
      "castVoteBySig",
      "castVoteBySig(address,bytes32,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(_voter),
        ethereum.Value.fromFixedBytes(_proposalId),
        ethereum.Value.fromUnsignedBigInt(_support),
        ethereum.Value.fromUnsignedBigInt(_deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_v)),
        ethereum.Value.fromFixedBytes(_r),
        ethereum.Value.fromFixedBytes(_s)
      ]
    );

    return result[0].toBigInt();
  }

  try_castVoteBySig(
    _voter: Address,
    _proposalId: Bytes,
    _support: BigInt,
    _deadline: BigInt,
    _v: i32,
    _r: Bytes,
    _s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVoteBySig",
      "castVoteBySig(address,bytes32,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(_voter),
        ethereum.Value.fromFixedBytes(_proposalId),
        ethereum.Value.fromUnsignedBigInt(_support),
        ethereum.Value.fromUnsignedBigInt(_deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_v)),
        ethereum.Value.fromFixedBytes(_r),
        ethereum.Value.fromFixedBytes(_s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  castVoteWithReason(
    _proposalId: Bytes,
    _support: BigInt,
    _reason: string
  ): BigInt {
    let result = super.call(
      "castVoteWithReason",
      "castVoteWithReason(bytes32,uint256,string):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_proposalId),
        ethereum.Value.fromUnsignedBigInt(_support),
        ethereum.Value.fromString(_reason)
      ]
    );

    return result[0].toBigInt();
  }

  try_castVoteWithReason(
    _proposalId: Bytes,
    _support: BigInt,
    _reason: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "castVoteWithReason",
      "castVoteWithReason(bytes32,uint256,string):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_proposalId),
        ethereum.Value.fromUnsignedBigInt(_support),
        ethereum.Value.fromString(_reason)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProposal(_proposalId: Bytes): Governor__getProposalResultValue0Struct {
    let result = super.call(
      "getProposal",
      "getProposal(bytes32):((address,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,bool,bool,bool))",
      [ethereum.Value.fromFixedBytes(_proposalId)]
    );

    return changetype<Governor__getProposalResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getProposal(
    _proposalId: Bytes
  ): ethereum.CallResult<Governor__getProposalResultValue0Struct> {
    let result = super.tryCall(
      "getProposal",
      "getProposal(bytes32):((address,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,bool,bool,bool))",
      [ethereum.Value.fromFixedBytes(_proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Governor__getProposalResultValue0Struct>(value[0].toTuple())
    );
  }

  getVotes(_account: Address, _timestamp: BigInt): BigInt {
    let result = super.call("getVotes", "getVotes(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_account),
      ethereum.Value.fromUnsignedBigInt(_timestamp)
    ]);

    return result[0].toBigInt();
  }

  try_getVotes(
    _account: Address,
    _timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVotes",
      "getVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hashProposal(
    _targets: Array<Address>,
    _values: Array<BigInt>,
    _calldatas: Array<Bytes>,
    _descriptionHash: Bytes,
    _proposer: Address
  ): Bytes {
    let result = super.call(
      "hashProposal",
      "hashProposal(address[],uint256[],bytes[],bytes32,address):(bytes32)",
      [
        ethereum.Value.fromAddressArray(_targets),
        ethereum.Value.fromUnsignedBigIntArray(_values),
        ethereum.Value.fromBytesArray(_calldatas),
        ethereum.Value.fromFixedBytes(_descriptionHash),
        ethereum.Value.fromAddress(_proposer)
      ]
    );

    return result[0].toBytes();
  }

  try_hashProposal(
    _targets: Array<Address>,
    _values: Array<BigInt>,
    _calldatas: Array<Bytes>,
    _descriptionHash: Bytes,
    _proposer: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashProposal",
      "hashProposal(address[],uint256[],bytes[],bytes32,address):(bytes32)",
      [
        ethereum.Value.fromAddressArray(_targets),
        ethereum.Value.fromUnsignedBigIntArray(_values),
        ethereum.Value.fromBytesArray(_calldatas),
        ethereum.Value.fromFixedBytes(_descriptionHash),
        ethereum.Value.fromAddress(_proposer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  nonce(_account: Address): BigInt {
    let result = super.call("nonce", "nonce(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_nonce(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonce", "nonce(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposalDeadline(_proposalId: Bytes): BigInt {
    let result = super.call(
      "proposalDeadline",
      "proposalDeadline(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_proposalId)]
    );

    return result[0].toBigInt();
  }

  try_proposalDeadline(_proposalId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalDeadline",
      "proposalDeadline(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalEta(_proposalId: Bytes): BigInt {
    let result = super.call("proposalEta", "proposalEta(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBigInt();
  }

  try_proposalEta(_proposalId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalEta",
      "proposalEta(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalSnapshot(_proposalId: Bytes): BigInt {
    let result = super.call(
      "proposalSnapshot",
      "proposalSnapshot(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_proposalId)]
    );

    return result[0].toBigInt();
  }

  try_proposalSnapshot(_proposalId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalSnapshot",
      "proposalSnapshot(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalThreshold(): BigInt {
    let result = super.call(
      "proposalThreshold",
      "proposalThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalThreshold",
      "proposalThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalThresholdBps(): BigInt {
    let result = super.call(
      "proposalThresholdBps",
      "proposalThresholdBps():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalThresholdBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalThresholdBps",
      "proposalThresholdBps():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalVotes(_proposalId: Bytes): Governor__proposalVotesResult {
    let result = super.call(
      "proposalVotes",
      "proposalVotes(bytes32):(uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(_proposalId)]
    );

    return new Governor__proposalVotesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_proposalVotes(
    _proposalId: Bytes
  ): ethereum.CallResult<Governor__proposalVotesResult> {
    let result = super.tryCall(
      "proposalVotes",
      "proposalVotes(bytes32):(uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(_proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Governor__proposalVotesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  propose(
    _targets: Array<Address>,
    _values: Array<BigInt>,
    _calldatas: Array<Bytes>,
    _description: string
  ): Bytes {
    let result = super.call(
      "propose",
      "propose(address[],uint256[],bytes[],string):(bytes32)",
      [
        ethereum.Value.fromAddressArray(_targets),
        ethereum.Value.fromUnsignedBigIntArray(_values),
        ethereum.Value.fromBytesArray(_calldatas),
        ethereum.Value.fromString(_description)
      ]
    );

    return result[0].toBytes();
  }

  try_propose(
    _targets: Array<Address>,
    _values: Array<BigInt>,
    _calldatas: Array<Bytes>,
    _description: string
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "propose",
      "propose(address[],uint256[],bytes[],string):(bytes32)",
      [
        ethereum.Value.fromAddressArray(_targets),
        ethereum.Value.fromUnsignedBigIntArray(_values),
        ethereum.Value.fromBytesArray(_calldatas),
        ethereum.Value.fromString(_description)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  queue(_proposalId: Bytes): BigInt {
    let result = super.call("queue", "queue(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBigInt();
  }

  try_queue(_proposalId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("queue", "queue(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorum(): BigInt {
    let result = super.call("quorum", "quorum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_quorum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("quorum", "quorum():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorumThresholdBps(): BigInt {
    let result = super.call(
      "quorumThresholdBps",
      "quorumThresholdBps():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_quorumThresholdBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quorumThresholdBps",
      "quorumThresholdBps():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  state(_proposalId: Bytes): i32 {
    let result = super.call("state", "state(bytes32):(uint8)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);

    return result[0].toI32();
  }

  try_state(_proposalId: Bytes): ethereum.CallResult<i32> {
    let result = super.tryCall("state", "state(bytes32):(uint8)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vetoer(): Address {
    let result = super.call("vetoer", "vetoer():(address)", []);

    return result[0].toAddress();
  }

  try_vetoer(): ethereum.CallResult<Address> {
    let result = super.tryCall("vetoer", "vetoer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  votingDelay(): BigInt {
    let result = super.call("votingDelay", "votingDelay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votingDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingDelay", "votingDelay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingPeriod(): BigInt {
    let result = super.call("votingPeriod", "votingPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votingPeriod", "votingPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class BurnVetoerCall extends ethereum.Call {
  get inputs(): BurnVetoerCall__Inputs {
    return new BurnVetoerCall__Inputs(this);
  }

  get outputs(): BurnVetoerCall__Outputs {
    return new BurnVetoerCall__Outputs(this);
  }
}

export class BurnVetoerCall__Inputs {
  _call: BurnVetoerCall;

  constructor(call: BurnVetoerCall) {
    this._call = call;
  }
}

export class BurnVetoerCall__Outputs {
  _call: BurnVetoerCall;

  constructor(call: BurnVetoerCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class CancelOwnershipTransferCall extends ethereum.Call {
  get inputs(): CancelOwnershipTransferCall__Inputs {
    return new CancelOwnershipTransferCall__Inputs(this);
  }

  get outputs(): CancelOwnershipTransferCall__Outputs {
    return new CancelOwnershipTransferCall__Outputs(this);
  }
}

export class CancelOwnershipTransferCall__Inputs {
  _call: CancelOwnershipTransferCall;

  constructor(call: CancelOwnershipTransferCall) {
    this._call = call;
  }
}

export class CancelOwnershipTransferCall__Outputs {
  _call: CancelOwnershipTransferCall;

  constructor(call: CancelOwnershipTransferCall) {
    this._call = call;
  }
}

export class CastVoteCall extends ethereum.Call {
  get inputs(): CastVoteCall__Inputs {
    return new CastVoteCall__Inputs(this);
  }

  get outputs(): CastVoteCall__Outputs {
    return new CastVoteCall__Outputs(this);
  }
}

export class CastVoteCall__Inputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _support(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CastVoteCall__Outputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CastVoteBySigCall extends ethereum.Call {
  get inputs(): CastVoteBySigCall__Inputs {
    return new CastVoteBySigCall__Inputs(this);
  }

  get outputs(): CastVoteBySigCall__Outputs {
    return new CastVoteBySigCall__Outputs(this);
  }
}

export class CastVoteBySigCall__Inputs {
  _call: CastVoteBySigCall;

  constructor(call: CastVoteBySigCall) {
    this._call = call;
  }

  get _voter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _support(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class CastVoteBySigCall__Outputs {
  _call: CastVoteBySigCall;

  constructor(call: CastVoteBySigCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CastVoteWithReasonCall extends ethereum.Call {
  get inputs(): CastVoteWithReasonCall__Inputs {
    return new CastVoteWithReasonCall__Inputs(this);
  }

  get outputs(): CastVoteWithReasonCall__Outputs {
    return new CastVoteWithReasonCall__Outputs(this);
  }
}

export class CastVoteWithReasonCall__Inputs {
  _call: CastVoteWithReasonCall;

  constructor(call: CastVoteWithReasonCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _support(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _reason(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CastVoteWithReasonCall__Outputs {
  _call: CastVoteWithReasonCall;

  constructor(call: CastVoteWithReasonCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get _targets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _calldatas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get _descriptionHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _proposer(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _vetoer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _votingDelay(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _votingPeriod(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _proposalThresholdBps(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _quorumThresholdBps(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ProposeCall extends ethereum.Call {
  get inputs(): ProposeCall__Inputs {
    return new ProposeCall__Inputs(this);
  }

  get outputs(): ProposeCall__Outputs {
    return new ProposeCall__Outputs(this);
  }
}

export class ProposeCall__Inputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get _targets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _calldatas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get _description(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ProposeCall__Outputs {
  _call: ProposeCall;

  constructor(call: ProposeCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class QueueCall extends ethereum.Call {
  get inputs(): QueueCall__Inputs {
    return new QueueCall__Inputs(this);
  }

  get outputs(): QueueCall__Outputs {
    return new QueueCall__Outputs(this);
  }
}

export class QueueCall__Inputs {
  _call: QueueCall;

  constructor(call: QueueCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class QueueCall__Outputs {
  _call: QueueCall;

  constructor(call: QueueCall) {
    this._call = call;
  }

  get eta(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SafeTransferOwnershipCall extends ethereum.Call {
  get inputs(): SafeTransferOwnershipCall__Inputs {
    return new SafeTransferOwnershipCall__Inputs(this);
  }

  get outputs(): SafeTransferOwnershipCall__Outputs {
    return new SafeTransferOwnershipCall__Outputs(this);
  }
}

export class SafeTransferOwnershipCall__Inputs {
  _call: SafeTransferOwnershipCall;

  constructor(call: SafeTransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SafeTransferOwnershipCall__Outputs {
  _call: SafeTransferOwnershipCall;

  constructor(call: SafeTransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateProposalThresholdBpsCall extends ethereum.Call {
  get inputs(): UpdateProposalThresholdBpsCall__Inputs {
    return new UpdateProposalThresholdBpsCall__Inputs(this);
  }

  get outputs(): UpdateProposalThresholdBpsCall__Outputs {
    return new UpdateProposalThresholdBpsCall__Outputs(this);
  }
}

export class UpdateProposalThresholdBpsCall__Inputs {
  _call: UpdateProposalThresholdBpsCall;

  constructor(call: UpdateProposalThresholdBpsCall) {
    this._call = call;
  }

  get _newProposalThresholdBps(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateProposalThresholdBpsCall__Outputs {
  _call: UpdateProposalThresholdBpsCall;

  constructor(call: UpdateProposalThresholdBpsCall) {
    this._call = call;
  }
}

export class UpdateQuorumThresholdBpsCall extends ethereum.Call {
  get inputs(): UpdateQuorumThresholdBpsCall__Inputs {
    return new UpdateQuorumThresholdBpsCall__Inputs(this);
  }

  get outputs(): UpdateQuorumThresholdBpsCall__Outputs {
    return new UpdateQuorumThresholdBpsCall__Outputs(this);
  }
}

export class UpdateQuorumThresholdBpsCall__Inputs {
  _call: UpdateQuorumThresholdBpsCall;

  constructor(call: UpdateQuorumThresholdBpsCall) {
    this._call = call;
  }

  get _newQuorumVotesBps(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateQuorumThresholdBpsCall__Outputs {
  _call: UpdateQuorumThresholdBpsCall;

  constructor(call: UpdateQuorumThresholdBpsCall) {
    this._call = call;
  }
}

export class UpdateVetoerCall extends ethereum.Call {
  get inputs(): UpdateVetoerCall__Inputs {
    return new UpdateVetoerCall__Inputs(this);
  }

  get outputs(): UpdateVetoerCall__Outputs {
    return new UpdateVetoerCall__Outputs(this);
  }
}

export class UpdateVetoerCall__Inputs {
  _call: UpdateVetoerCall;

  constructor(call: UpdateVetoerCall) {
    this._call = call;
  }

  get _newVetoer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateVetoerCall__Outputs {
  _call: UpdateVetoerCall;

  constructor(call: UpdateVetoerCall) {
    this._call = call;
  }
}

export class UpdateVotingDelayCall extends ethereum.Call {
  get inputs(): UpdateVotingDelayCall__Inputs {
    return new UpdateVotingDelayCall__Inputs(this);
  }

  get outputs(): UpdateVotingDelayCall__Outputs {
    return new UpdateVotingDelayCall__Outputs(this);
  }
}

export class UpdateVotingDelayCall__Inputs {
  _call: UpdateVotingDelayCall;

  constructor(call: UpdateVotingDelayCall) {
    this._call = call;
  }

  get _newVotingDelay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateVotingDelayCall__Outputs {
  _call: UpdateVotingDelayCall;

  constructor(call: UpdateVotingDelayCall) {
    this._call = call;
  }
}

export class UpdateVotingPeriodCall extends ethereum.Call {
  get inputs(): UpdateVotingPeriodCall__Inputs {
    return new UpdateVotingPeriodCall__Inputs(this);
  }

  get outputs(): UpdateVotingPeriodCall__Outputs {
    return new UpdateVotingPeriodCall__Outputs(this);
  }
}

export class UpdateVotingPeriodCall__Inputs {
  _call: UpdateVotingPeriodCall;

  constructor(call: UpdateVotingPeriodCall) {
    this._call = call;
  }

  get _newVotingPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateVotingPeriodCall__Outputs {
  _call: UpdateVotingPeriodCall;

  constructor(call: UpdateVotingPeriodCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get _newImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get _newImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class VetoCall extends ethereum.Call {
  get inputs(): VetoCall__Inputs {
    return new VetoCall__Inputs(this);
  }

  get outputs(): VetoCall__Outputs {
    return new VetoCall__Outputs(this);
  }
}

export class VetoCall__Inputs {
  _call: VetoCall;

  constructor(call: VetoCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class VetoCall__Outputs {
  _call: VetoCall;

  constructor(call: VetoCall) {
    this._call = call;
  }
}
