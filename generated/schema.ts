// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class FounderInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FounderInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FounderInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FounderInfo", id.toString(), this);
    }
  }

  static load(id: string): FounderInfo | null {
    return changetype<FounderInfo | null>(store.get("FounderInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownershipPercentage(): BigInt {
    let value = this.get("ownershipPercentage");
    return value!.toBigInt();
  }

  set ownershipPercentage(value: BigInt) {
    this.set("ownershipPercentage", Value.fromBigInt(value));
  }

  get vestExpiry(): BigInt {
    let value = this.get("vestExpiry");
    return value!.toBigInt();
  }

  set vestExpiry(value: BigInt) {
    this.set("vestExpiry", Value.fromBigInt(value));
  }

  get tokenContract(): string {
    let value = this.get("tokenContract");
    return value!.toString();
  }

  set tokenContract(value: string) {
    this.set("tokenContract", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }
}

export class DAO extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DAO entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DAO must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DAO", id.toString(), this);
    }
  }

  static load(id: string): DAO | null {
    return changetype<DAO | null>(store.get("DAO", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenContract(): string {
    let value = this.get("tokenContract");
    return value!.toString();
  }

  set tokenContract(value: string) {
    this.set("tokenContract", Value.fromString(value));
  }

  get auctionContract(): string {
    let value = this.get("auctionContract");
    return value!.toString();
  }

  set auctionContract(value: string) {
    this.set("auctionContract", Value.fromString(value));
  }

  get metadataContract(): string {
    let value = this.get("metadataContract");
    return value!.toString();
  }

  set metadataContract(value: string) {
    this.set("metadataContract", Value.fromString(value));
  }

  get governorContract(): string {
    let value = this.get("governorContract");
    return value!.toString();
  }

  set governorContract(value: string) {
    this.set("governorContract", Value.fromString(value));
  }

  get treasuryContract(): string {
    let value = this.get("treasuryContract");
    return value!.toString();
  }

  set treasuryContract(value: string) {
    this.set("treasuryContract", Value.fromString(value));
  }
}

export class TokenContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenContract", id.toString(), this);
    }
  }

  static load(id: string): TokenContract | null {
    return changetype<TokenContract | null>(store.get("TokenContract", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get contractURI(): string {
    let value = this.get("contractURI");
    return value!.toString();
  }

  set contractURI(value: string) {
    this.set("contractURI", Value.fromString(value));
  }

  get DAO(): string {
    let value = this.get("DAO");
    return value!.toString();
  }

  set DAO(value: string) {
    this.set("DAO", Value.fromString(value));
  }

  get auctionContract(): string {
    let value = this.get("auctionContract");
    return value!.toString();
  }

  set auctionContract(value: string) {
    this.set("auctionContract", Value.fromString(value));
  }

  get founders(): Array<string> {
    let value = this.get("founders");
    return value!.toStringArray();
  }

  set founders(value: Array<string>) {
    this.set("founders", Value.fromStringArray(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value!.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get tokenContract(): string {
    let value = this.get("tokenContract");
    return value!.toString();
  }

  set tokenContract(value: string) {
    this.set("tokenContract", Value.fromString(value));
  }

  get auction(): string {
    let value = this.get("auction");
    return value!.toString();
  }

  set auction(value: string) {
    this.set("auction", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class AuctionContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuctionContract", id.toString(), this);
    }
  }

  static load(id: string): AuctionContract | null {
    return changetype<AuctionContract | null>(store.get("AuctionContract", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    return value!.toBigInt();
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get reservePrice(): BigInt {
    let value = this.get("reservePrice");
    return value!.toBigInt();
  }

  set reservePrice(value: BigInt) {
    this.set("reservePrice", Value.fromBigInt(value));
  }

  get timeBuffer(): BigInt {
    let value = this.get("timeBuffer");
    return value!.toBigInt();
  }

  set timeBuffer(value: BigInt) {
    this.set("timeBuffer", Value.fromBigInt(value));
  }

  get minBidIncrement(): BigInt {
    let value = this.get("minBidIncrement");
    return value!.toBigInt();
  }

  set minBidIncrement(value: BigInt) {
    this.set("minBidIncrement", Value.fromBigInt(value));
  }

  get paused(): boolean {
    let value = this.get("paused");
    return value!.toBoolean();
  }

  set paused(value: boolean) {
    this.set("paused", Value.fromBoolean(value));
  }

  get DAO(): string {
    let value = this.get("DAO");
    return value!.toString();
  }

  set DAO(value: string) {
    this.set("DAO", Value.fromString(value));
  }

  get tokenContract(): string {
    let value = this.get("tokenContract");
    return value!.toString();
  }

  set tokenContract(value: string) {
    this.set("tokenContract", Value.fromString(value));
  }

  get auctions(): Array<string> {
    let value = this.get("auctions");
    return value!.toStringArray();
  }

  set auctions(value: Array<string>) {
    this.set("auctions", Value.fromStringArray(value));
  }
}

export class Auction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Auction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Auction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Auction", id.toString(), this);
    }
  }

  static load(id: string): Auction | null {
    return changetype<Auction | null>(store.get("Auction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get settled(): boolean {
    let value = this.get("settled");
    return value!.toBoolean();
  }

  set settled(value: boolean) {
    this.set("settled", Value.fromBoolean(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value!.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    return value!.toBigInt();
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get winner(): string | null {
    let value = this.get("winner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set winner(value: string | null) {
    if (!value) {
      this.unset("winner");
    } else {
      this.set("winner", Value.fromString(<string>value));
    }
  }

  get winningBid(): string | null {
    let value = this.get("winningBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set winningBid(value: string | null) {
    if (!value) {
      this.unset("winningBid");
    } else {
      this.set("winningBid", Value.fromString(<string>value));
    }
  }

  get auctionContract(): string {
    let value = this.get("auctionContract");
    return value!.toString();
  }

  set auctionContract(value: string) {
    this.set("auctionContract", Value.fromString(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get bids(): Array<string> {
    let value = this.get("bids");
    return value!.toStringArray();
  }

  set bids(value: Array<string>) {
    this.set("bids", Value.fromStringArray(value));
  }
}

export class AuctionBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionBid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionBid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuctionBid", id.toString(), this);
    }
  }

  static load(id: string): AuctionBid | null {
    return changetype<AuctionBid | null>(store.get("AuctionBid", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get extended(): boolean {
    let value = this.get("extended");
    return value!.toBoolean();
  }

  set extended(value: boolean) {
    this.set("extended", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get auction(): string {
    let value = this.get("auction");
    return value!.toString();
  }

  set auction(value: string) {
    this.set("auction", Value.fromString(value));
  }

  get bidder(): string {
    let value = this.get("bidder");
    return value!.toString();
  }

  set bidder(value: string) {
    this.set("bidder", Value.fromString(value));
  }
}

export class Delegation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Delegation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Delegation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Delegation", id.toString(), this);
    }
  }

  static load(id: string): Delegation | null {
    return changetype<Delegation | null>(store.get("Delegation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get DAO(): string {
    let value = this.get("DAO");
    return value!.toString();
  }

  set DAO(value: string) {
    this.set("DAO", Value.fromString(value));
  }

  get voter(): string {
    let value = this.get("voter");
    return value!.toString();
  }

  set voter(value: string) {
    this.set("voter", Value.fromString(value));
  }

  get delegatedTo(): string {
    let value = this.get("delegatedTo");
    return value!.toString();
  }

  set delegatedTo(value: string) {
    this.set("delegatedTo", Value.fromString(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bids(): Array<string> {
    let value = this.get("bids");
    return value!.toStringArray();
  }

  set bids(value: Array<string>) {
    this.set("bids", Value.fromStringArray(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get votes(): Array<string> {
    let value = this.get("votes");
    return value!.toStringArray();
  }

  set votes(value: Array<string>) {
    this.set("votes", Value.fromStringArray(value));
  }

  get submittedProposals(): Array<string> {
    let value = this.get("submittedProposals");
    return value!.toStringArray();
  }

  set submittedProposals(value: Array<string>) {
    this.set("submittedProposals", Value.fromStringArray(value));
  }

  get delegations(): Array<string> {
    let value = this.get("delegations");
    return value!.toStringArray();
  }

  set delegations(value: Array<string>) {
    this.set("delegations", Value.fromStringArray(value));
  }

  get delegatedBy(): Array<string> {
    let value = this.get("delegatedBy");
    return value!.toStringArray();
  }

  set delegatedBy(value: Array<string>) {
    this.set("delegatedBy", Value.fromStringArray(value));
  }
}

export class Property extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Property entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Property must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Property", id.toString(), this);
    }
  }

  static load(id: string): Property | null {
    return changetype<Property | null>(store.get("Property", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get metadataContract(): string {
    let value = this.get("metadataContract");
    return value!.toString();
  }

  set metadataContract(value: string) {
    this.set("metadataContract", Value.fromString(value));
  }
}

export class MetadataContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MetadataContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MetadataContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MetadataContract", id.toString(), this);
    }
  }

  static load(id: string): MetadataContract | null {
    return changetype<MetadataContract | null>(
      store.get("MetadataContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get websiteURL(): string {
    let value = this.get("websiteURL");
    return value!.toString();
  }

  set websiteURL(value: string) {
    this.set("websiteURL", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get contractImage(): string {
    let value = this.get("contractImage");
    return value!.toString();
  }

  set contractImage(value: string) {
    this.set("contractImage", Value.fromString(value));
  }

  get rendererBase(): string {
    let value = this.get("rendererBase");
    return value!.toString();
  }

  set rendererBase(value: string) {
    this.set("rendererBase", Value.fromString(value));
  }

  get properties(): Array<string> {
    let value = this.get("properties");
    return value!.toStringArray();
  }

  set properties(value: Array<string>) {
    this.set("properties", Value.fromStringArray(value));
  }

  get DAO(): string {
    let value = this.get("DAO");
    return value!.toString();
  }

  set DAO(value: string) {
    this.set("DAO", Value.fromString(value));
  }
}

export class TreasuryTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TreasuryTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TreasuryTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TreasuryTransaction", id.toString(), this);
    }
  }

  static load(id: string): TreasuryTransaction | null {
    return changetype<TreasuryTransaction | null>(
      store.get("TreasuryTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get treasuryContract(): string {
    let value = this.get("treasuryContract");
    return value!.toString();
  }

  set treasuryContract(value: string) {
    this.set("treasuryContract", Value.fromString(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value!.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }
}

export class TreasuryContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TreasuryContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TreasuryContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TreasuryContract", id.toString(), this);
    }
  }

  static load(id: string): TreasuryContract | null {
    return changetype<TreasuryContract | null>(
      store.get("TreasuryContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delay(): BigInt {
    let value = this.get("delay");
    return value!.toBigInt();
  }

  set delay(value: BigInt) {
    this.set("delay", Value.fromBigInt(value));
  }

  get gracePeriod(): BigInt {
    let value = this.get("gracePeriod");
    return value!.toBigInt();
  }

  set gracePeriod(value: BigInt) {
    this.set("gracePeriod", Value.fromBigInt(value));
  }

  get DAO(): string {
    let value = this.get("DAO");
    return value!.toString();
  }

  set DAO(value: string) {
    this.set("DAO", Value.fromString(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class GovernorContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GovernorContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GovernorContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GovernorContract", id.toString(), this);
    }
  }

  static load(id: string): GovernorContract | null {
    return changetype<GovernorContract | null>(
      store.get("GovernorContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vetoEnabled(): boolean {
    let value = this.get("vetoEnabled");
    return value!.toBoolean();
  }

  set vetoEnabled(value: boolean) {
    this.set("vetoEnabled", Value.fromBoolean(value));
  }

  get vetoerAddress(): Bytes {
    let value = this.get("vetoerAddress");
    return value!.toBytes();
  }

  set vetoerAddress(value: Bytes) {
    this.set("vetoerAddress", Value.fromBytes(value));
  }

  get proposalThreshold(): BigInt {
    let value = this.get("proposalThreshold");
    return value!.toBigInt();
  }

  set proposalThreshold(value: BigInt) {
    this.set("proposalThreshold", Value.fromBigInt(value));
  }

  get quoromThreshold(): BigInt {
    let value = this.get("quoromThreshold");
    return value!.toBigInt();
  }

  set quoromThreshold(value: BigInt) {
    this.set("quoromThreshold", Value.fromBigInt(value));
  }

  get votingDelay(): BigInt {
    let value = this.get("votingDelay");
    return value!.toBigInt();
  }

  set votingDelay(value: BigInt) {
    this.set("votingDelay", Value.fromBigInt(value));
  }

  get votingPeriod(): BigInt {
    let value = this.get("votingPeriod");
    return value!.toBigInt();
  }

  set votingPeriod(value: BigInt) {
    this.set("votingPeriod", Value.fromBigInt(value));
  }

  get proposals(): Array<string> {
    let value = this.get("proposals");
    return value!.toStringArray();
  }

  set proposals(value: Array<string>) {
    this.set("proposals", Value.fromStringArray(value));
  }

  get DAO(): string {
    let value = this.get("DAO");
    return value!.toString();
  }

  set DAO(value: string) {
    this.set("DAO", Value.fromString(value));
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Proposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Proposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Proposal", id.toString(), this);
    }
  }

  static load(id: string): Proposal | null {
    return changetype<Proposal | null>(store.get("Proposal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get descriptionHash(): Bytes {
    let value = this.get("descriptionHash");
    return value!.toBytes();
  }

  set descriptionHash(value: Bytes) {
    this.set("descriptionHash", Value.fromBytes(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get targets(): Array<string> {
    let value = this.get("targets");
    return value!.toStringArray();
  }

  set targets(value: Array<string>) {
    this.set("targets", Value.fromStringArray(value));
  }

  get values(): Array<BigInt> {
    let value = this.get("values");
    return value!.toBigIntArray();
  }

  set values(value: Array<BigInt>) {
    this.set("values", Value.fromBigIntArray(value));
  }

  get calldatas(): Array<Bytes> {
    let value = this.get("calldatas");
    return value!.toBytesArray();
  }

  set calldatas(value: Array<Bytes>) {
    this.set("calldatas", Value.fromBytesArray(value));
  }

  get forVotes(): BigInt {
    let value = this.get("forVotes");
    return value!.toBigInt();
  }

  set forVotes(value: BigInt) {
    this.set("forVotes", Value.fromBigInt(value));
  }

  get againstVotes(): BigInt {
    let value = this.get("againstVotes");
    return value!.toBigInt();
  }

  set againstVotes(value: BigInt) {
    this.set("againstVotes", Value.fromBigInt(value));
  }

  get abstainVotes(): BigInt {
    let value = this.get("abstainVotes");
    return value!.toBigInt();
  }

  set abstainVotes(value: BigInt) {
    this.set("abstainVotes", Value.fromBigInt(value));
  }

  get governorContract(): string {
    let value = this.get("governorContract");
    return value!.toString();
  }

  set governorContract(value: string) {
    this.set("governorContract", Value.fromString(value));
  }

  get submitter(): string {
    let value = this.get("submitter");
    return value!.toString();
  }

  set submitter(value: string) {
    this.set("submitter", Value.fromString(value));
  }

  get votes(): Array<string> {
    let value = this.get("votes");
    return value!.toStringArray();
  }

  set votes(value: Array<string>) {
    this.set("votes", Value.fromStringArray(value));
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get supported(): string {
    let value = this.get("supported");
    return value!.toString();
  }

  set supported(value: string) {
    this.set("supported", Value.fromString(value));
  }

  get reason(): string {
    let value = this.get("reason");
    return value!.toString();
  }

  set reason(value: string) {
    this.set("reason", Value.fromString(value));
  }

  get weight(): BigInt {
    let value = this.get("weight");
    return value!.toBigInt();
  }

  set weight(value: BigInt) {
    this.set("weight", Value.fromBigInt(value));
  }

  get proposal(): string {
    let value = this.get("proposal");
    return value!.toString();
  }

  set proposal(value: string) {
    this.set("proposal", Value.fromString(value));
  }

  get voter(): string {
    let value = this.get("voter");
    return value!.toString();
  }

  set voter(value: string) {
    this.set("voter", Value.fromString(value));
  }
}
