// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DelayUpdated extends ethereum.Event {
  get params(): DelayUpdated__Params {
    return new DelayUpdated__Params(this);
  }
}

export class DelayUpdated__Params {
  _event: DelayUpdated;

  constructor(event: DelayUpdated) {
    this._event = event;
  }

  get prevDelay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newDelay(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GracePeriodUpdated extends ethereum.Event {
  get params(): GracePeriodUpdated__Params {
    return new GracePeriodUpdated__Params(this);
  }
}

export class GracePeriodUpdated__Params {
  _event: GracePeriodUpdated;

  constructor(event: GracePeriodUpdated) {
    this._event = event;
  }

  get prevGracePeriod(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newGracePeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TreasuryInitialized extends ethereum.Event {
  get params(): TreasuryInitialized__Params {
    return new TreasuryInitialized__Params(this);
  }
}

export class TreasuryInitialized__Params {
  _event: TreasuryInitialized;

  constructor(event: TreasuryInitialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TreasuryOwnerCanceled extends ethereum.Event {
  get params(): TreasuryOwnerCanceled__Params {
    return new TreasuryOwnerCanceled__Params(this);
  }
}

export class TreasuryOwnerCanceled__Params {
  _event: TreasuryOwnerCanceled;

  constructor(event: TreasuryOwnerCanceled) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get canceledOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TreasuryOwnerPending extends ethereum.Event {
  get params(): TreasuryOwnerPending__Params {
    return new TreasuryOwnerPending__Params(this);
  }
}

export class TreasuryOwnerPending__Params {
  _event: TreasuryOwnerPending;

  constructor(event: TreasuryOwnerPending) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pendingOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TreasuryOwnerUpdated extends ethereum.Event {
  get params(): TreasuryOwnerUpdated__Params {
    return new TreasuryOwnerUpdated__Params(this);
  }
}

export class TreasuryOwnerUpdated__Params {
  _event: TreasuryOwnerUpdated;

  constructor(event: TreasuryOwnerUpdated) {
    this._event = event;
  }

  get prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransactionCanceled extends ethereum.Event {
  get params(): TransactionCanceled__Params {
    return new TransactionCanceled__Params(this);
  }
}

export class TransactionCanceled__Params {
  _event: TransactionCanceled;

  constructor(event: TransactionCanceled) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class TransactionExecuted extends ethereum.Event {
  get params(): TransactionExecuted__Params {
    return new TransactionExecuted__Params(this);
  }
}

export class TransactionExecuted__Params {
  _event: TransactionExecuted;

  constructor(event: TransactionExecuted) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get targets(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get payloads(): Array<Bytes> {
    return this._event.parameters[3].value.toBytesArray();
  }
}

export class TransactionScheduled extends ethereum.Event {
  get params(): TransactionScheduled__Params {
    return new TransactionScheduled__Params(this);
  }
}

export class TransactionScheduled__Params {
  _event: TransactionScheduled;

  constructor(event: TransactionScheduled) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TreasuryUpgraded extends ethereum.Event {
  get params(): TreasuryUpgraded__Params {
    return new TreasuryUpgraded__Params(this);
  }
}

export class TreasuryUpgraded__Params {
  _event: TreasuryUpgraded;

  constructor(event: TreasuryUpgraded) {
    this._event = event;
  }

  get impl(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Treasury extends ethereum.SmartContract {
  static bind(address: Address): Treasury {
    return new Treasury("Treasury", address);
  }

  delay(): BigInt {
    let result = super.call("delay", "delay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_delay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("delay", "delay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gracePeriod(): BigInt {
    let result = super.call("gracePeriod", "gracePeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gracePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gracePeriod", "gracePeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hashProposal(
    _targets: Array<Address>,
    _values: Array<BigInt>,
    _calldatas: Array<Bytes>,
    _descriptionHash: Bytes,
    _proposer: Address
  ): Bytes {
    let result = super.call(
      "hashProposal",
      "hashProposal(address[],uint256[],bytes[],bytes32,address):(bytes32)",
      [
        ethereum.Value.fromAddressArray(_targets),
        ethereum.Value.fromUnsignedBigIntArray(_values),
        ethereum.Value.fromBytesArray(_calldatas),
        ethereum.Value.fromFixedBytes(_descriptionHash),
        ethereum.Value.fromAddress(_proposer)
      ]
    );

    return result[0].toBytes();
  }

  try_hashProposal(
    _targets: Array<Address>,
    _values: Array<BigInt>,
    _calldatas: Array<Bytes>,
    _descriptionHash: Bytes,
    _proposer: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashProposal",
      "hashProposal(address[],uint256[],bytes[],bytes32,address):(bytes32)",
      [
        ethereum.Value.fromAddressArray(_targets),
        ethereum.Value.fromUnsignedBigIntArray(_values),
        ethereum.Value.fromBytesArray(_calldatas),
        ethereum.Value.fromFixedBytes(_descriptionHash),
        ethereum.Value.fromAddress(_proposer)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isExpired(_proposalId: Bytes): boolean {
    let result = super.call("isExpired", "isExpired(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBoolean();
  }

  try_isExpired(_proposalId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isExpired", "isExpired(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isQueued(_proposalId: Bytes): boolean {
    let result = super.call("isQueued", "isQueued(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBoolean();
  }

  try_isQueued(_proposalId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isQueued", "isQueued(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isReady(_proposalId: Bytes): boolean {
    let result = super.call("isReady", "isReady(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBoolean();
  }

  try_isReady(_proposalId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isReady", "isReady(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  queue(_proposalId: Bytes): BigInt {
    let result = super.call("queue", "queue(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBigInt();
  }

  try_queue(_proposalId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("queue", "queue(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timestamp(_proposalId: Bytes): BigInt {
    let result = super.call("timestamp", "timestamp(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);

    return result[0].toBigInt();
  }

  try_timestamp(_proposalId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("timestamp", "timestamp(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(_proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class CancelOwnershipTransferCall extends ethereum.Call {
  get inputs(): CancelOwnershipTransferCall__Inputs {
    return new CancelOwnershipTransferCall__Inputs(this);
  }

  get outputs(): CancelOwnershipTransferCall__Outputs {
    return new CancelOwnershipTransferCall__Outputs(this);
  }
}

export class CancelOwnershipTransferCall__Inputs {
  _call: CancelOwnershipTransferCall;

  constructor(call: CancelOwnershipTransferCall) {
    this._call = call;
  }
}

export class CancelOwnershipTransferCall__Outputs {
  _call: CancelOwnershipTransferCall;

  constructor(call: CancelOwnershipTransferCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get _targets(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _calldatas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get _descriptionHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _proposer(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _governor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _delay(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class QueueCall extends ethereum.Call {
  get inputs(): QueueCall__Inputs {
    return new QueueCall__Inputs(this);
  }

  get outputs(): QueueCall__Outputs {
    return new QueueCall__Outputs(this);
  }
}

export class QueueCall__Inputs {
  _call: QueueCall;

  constructor(call: QueueCall) {
    this._call = call;
  }

  get _proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class QueueCall__Outputs {
  _call: QueueCall;

  constructor(call: QueueCall) {
    this._call = call;
  }

  get eta(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SafeTransferOwnershipCall extends ethereum.Call {
  get inputs(): SafeTransferOwnershipCall__Inputs {
    return new SafeTransferOwnershipCall__Inputs(this);
  }

  get outputs(): SafeTransferOwnershipCall__Outputs {
    return new SafeTransferOwnershipCall__Outputs(this);
  }
}

export class SafeTransferOwnershipCall__Inputs {
  _call: SafeTransferOwnershipCall;

  constructor(call: SafeTransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SafeTransferOwnershipCall__Outputs {
  _call: SafeTransferOwnershipCall;

  constructor(call: SafeTransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateDelayCall extends ethereum.Call {
  get inputs(): UpdateDelayCall__Inputs {
    return new UpdateDelayCall__Inputs(this);
  }

  get outputs(): UpdateDelayCall__Outputs {
    return new UpdateDelayCall__Outputs(this);
  }
}

export class UpdateDelayCall__Inputs {
  _call: UpdateDelayCall;

  constructor(call: UpdateDelayCall) {
    this._call = call;
  }

  get _newDelay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateDelayCall__Outputs {
  _call: UpdateDelayCall;

  constructor(call: UpdateDelayCall) {
    this._call = call;
  }
}

export class UpdateGracePeriodCall extends ethereum.Call {
  get inputs(): UpdateGracePeriodCall__Inputs {
    return new UpdateGracePeriodCall__Inputs(this);
  }

  get outputs(): UpdateGracePeriodCall__Outputs {
    return new UpdateGracePeriodCall__Outputs(this);
  }
}

export class UpdateGracePeriodCall__Inputs {
  _call: UpdateGracePeriodCall;

  constructor(call: UpdateGracePeriodCall) {
    this._call = call;
  }

  get _newGracePeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateGracePeriodCall__Outputs {
  _call: UpdateGracePeriodCall;

  constructor(call: UpdateGracePeriodCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get _newImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get _newImpl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
