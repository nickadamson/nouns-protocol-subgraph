"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity
is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type Account {
  id: ID!
  bids(skip: Int = 0, first: Int = 100, orderBy: AuctionBid_orderBy, orderDirection: OrderDirection, where: AuctionBid_filter): [AuctionBid!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]!
  votes(skip: Int = 0, first: Int = 100, orderBy: Vote_orderBy, orderDirection: OrderDirection, where: Vote_filter): [Vote!]!
  submittedProposals(skip: Int = 0, first: Int = 100, orderBy: Proposal_orderBy, orderDirection: OrderDirection, where: Proposal_filter): [Proposal!]!
  delegations(skip: Int = 0, first: Int = 100, orderBy: Delegation_orderBy, orderDirection: OrderDirection, where: Delegation_filter): [Delegation!]!
  delegatedBy(skip: Int = 0, first: Int = 100, orderBy: Delegation_orderBy, orderDirection: OrderDirection, where: Delegation_filter): [Delegation!]!
}

input Account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bids_: AuctionBid_filter
  tokens_: Token_filter
  votes_: Vote_filter
  submittedProposals_: Proposal_filter
  delegations_: Delegation_filter
  delegatedBy_: Delegation_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Account_orderBy {
  id
  bids
  tokens
  votes
  submittedProposals
  delegations
  delegatedBy
}

type Auction {
  id: ID!
  settled: Boolean!
  startTime: BigInt!
  endTime: BigInt!
  winner: Account
  winningBid: AuctionBid
  auctionContract: AuctionContract!
  token: Token
  bids(skip: Int = 0, first: Int = 100, orderBy: AuctionBid_orderBy, orderDirection: OrderDirection, where: AuctionBid_filter): [AuctionBid!]!
}

input Auction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  settled: Boolean
  settled_not: Boolean
  settled_in: [Boolean!]
  settled_not_in: [Boolean!]
  startTime: BigInt
  startTime_not: BigInt
  startTime_gt: BigInt
  startTime_lt: BigInt
  startTime_gte: BigInt
  startTime_lte: BigInt
  startTime_in: [BigInt!]
  startTime_not_in: [BigInt!]
  endTime: BigInt
  endTime_not: BigInt
  endTime_gt: BigInt
  endTime_lt: BigInt
  endTime_gte: BigInt
  endTime_lte: BigInt
  endTime_in: [BigInt!]
  endTime_not_in: [BigInt!]
  winner: String
  winner_not: String
  winner_gt: String
  winner_lt: String
  winner_gte: String
  winner_lte: String
  winner_in: [String!]
  winner_not_in: [String!]
  winner_contains: String
  winner_contains_nocase: String
  winner_not_contains: String
  winner_not_contains_nocase: String
  winner_starts_with: String
  winner_starts_with_nocase: String
  winner_not_starts_with: String
  winner_not_starts_with_nocase: String
  winner_ends_with: String
  winner_ends_with_nocase: String
  winner_not_ends_with: String
  winner_not_ends_with_nocase: String
  winner_: Account_filter
  winningBid: String
  winningBid_not: String
  winningBid_gt: String
  winningBid_lt: String
  winningBid_gte: String
  winningBid_lte: String
  winningBid_in: [String!]
  winningBid_not_in: [String!]
  winningBid_contains: String
  winningBid_contains_nocase: String
  winningBid_not_contains: String
  winningBid_not_contains_nocase: String
  winningBid_starts_with: String
  winningBid_starts_with_nocase: String
  winningBid_not_starts_with: String
  winningBid_not_starts_with_nocase: String
  winningBid_ends_with: String
  winningBid_ends_with_nocase: String
  winningBid_not_ends_with: String
  winningBid_not_ends_with_nocase: String
  winningBid_: AuctionBid_filter
  auctionContract: String
  auctionContract_not: String
  auctionContract_gt: String
  auctionContract_lt: String
  auctionContract_gte: String
  auctionContract_lte: String
  auctionContract_in: [String!]
  auctionContract_not_in: [String!]
  auctionContract_contains: String
  auctionContract_contains_nocase: String
  auctionContract_not_contains: String
  auctionContract_not_contains_nocase: String
  auctionContract_starts_with: String
  auctionContract_starts_with_nocase: String
  auctionContract_not_starts_with: String
  auctionContract_not_starts_with_nocase: String
  auctionContract_ends_with: String
  auctionContract_ends_with_nocase: String
  auctionContract_not_ends_with: String
  auctionContract_not_ends_with_nocase: String
  auctionContract_: AuctionContract_filter
  token_: Token_filter
  bids_: AuctionBid_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Auction_orderBy {
  id
  settled
  startTime
  endTime
  winner
  winningBid
  auctionContract
  token
  bids
}

type AuctionBid {
  id: ID!
  amount: BigInt!
  extended: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  auction: Auction!
  bidder: Account!
}

input AuctionBid_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  extended: Boolean
  extended_not: Boolean
  extended_in: [Boolean!]
  extended_not_in: [Boolean!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  auction: String
  auction_not: String
  auction_gt: String
  auction_lt: String
  auction_gte: String
  auction_lte: String
  auction_in: [String!]
  auction_not_in: [String!]
  auction_contains: String
  auction_contains_nocase: String
  auction_not_contains: String
  auction_not_contains_nocase: String
  auction_starts_with: String
  auction_starts_with_nocase: String
  auction_not_starts_with: String
  auction_not_starts_with_nocase: String
  auction_ends_with: String
  auction_ends_with_nocase: String
  auction_not_ends_with: String
  auction_not_ends_with_nocase: String
  auction_: Auction_filter
  bidder: String
  bidder_not: String
  bidder_gt: String
  bidder_lt: String
  bidder_gte: String
  bidder_lte: String
  bidder_in: [String!]
  bidder_not_in: [String!]
  bidder_contains: String
  bidder_contains_nocase: String
  bidder_not_contains: String
  bidder_not_contains_nocase: String
  bidder_starts_with: String
  bidder_starts_with_nocase: String
  bidder_not_starts_with: String
  bidder_not_starts_with_nocase: String
  bidder_ends_with: String
  bidder_ends_with_nocase: String
  bidder_not_ends_with: String
  bidder_not_ends_with_nocase: String
  bidder_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum AuctionBid_orderBy {
  id
  amount
  extended
  blockNumber
  blockTimestamp
  auction
  bidder
}

type AuctionContract {
  id: ID!
  duration: BigInt!
  reservePrice: BigInt!
  timeBuffer: BigInt!
  minBidIncrement: BigInt!
  paused: Boolean!
  DAO: DAO!
  tokenContract: TokenContract!
  auctions(skip: Int = 0, first: Int = 100, orderBy: Auction_orderBy, orderDirection: OrderDirection, where: Auction_filter): [Auction!]!
}

input AuctionContract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  duration: BigInt
  duration_not: BigInt
  duration_gt: BigInt
  duration_lt: BigInt
  duration_gte: BigInt
  duration_lte: BigInt
  duration_in: [BigInt!]
  duration_not_in: [BigInt!]
  reservePrice: BigInt
  reservePrice_not: BigInt
  reservePrice_gt: BigInt
  reservePrice_lt: BigInt
  reservePrice_gte: BigInt
  reservePrice_lte: BigInt
  reservePrice_in: [BigInt!]
  reservePrice_not_in: [BigInt!]
  timeBuffer: BigInt
  timeBuffer_not: BigInt
  timeBuffer_gt: BigInt
  timeBuffer_lt: BigInt
  timeBuffer_gte: BigInt
  timeBuffer_lte: BigInt
  timeBuffer_in: [BigInt!]
  timeBuffer_not_in: [BigInt!]
  minBidIncrement: BigInt
  minBidIncrement_not: BigInt
  minBidIncrement_gt: BigInt
  minBidIncrement_lt: BigInt
  minBidIncrement_gte: BigInt
  minBidIncrement_lte: BigInt
  minBidIncrement_in: [BigInt!]
  minBidIncrement_not_in: [BigInt!]
  paused: Boolean
  paused_not: Boolean
  paused_in: [Boolean!]
  paused_not_in: [Boolean!]
  DAO: String
  DAO_not: String
  DAO_gt: String
  DAO_lt: String
  DAO_gte: String
  DAO_lte: String
  DAO_in: [String!]
  DAO_not_in: [String!]
  DAO_contains: String
  DAO_contains_nocase: String
  DAO_not_contains: String
  DAO_not_contains_nocase: String
  DAO_starts_with: String
  DAO_starts_with_nocase: String
  DAO_not_starts_with: String
  DAO_not_starts_with_nocase: String
  DAO_ends_with: String
  DAO_ends_with_nocase: String
  DAO_not_ends_with: String
  DAO_not_ends_with_nocase: String
  DAO_: DAO_filter
  tokenContract: String
  tokenContract_not: String
  tokenContract_gt: String
  tokenContract_lt: String
  tokenContract_gte: String
  tokenContract_lte: String
  tokenContract_in: [String!]
  tokenContract_not_in: [String!]
  tokenContract_contains: String
  tokenContract_contains_nocase: String
  tokenContract_not_contains: String
  tokenContract_not_contains_nocase: String
  tokenContract_starts_with: String
  tokenContract_starts_with_nocase: String
  tokenContract_not_starts_with: String
  tokenContract_not_starts_with_nocase: String
  tokenContract_ends_with: String
  tokenContract_ends_with_nocase: String
  tokenContract_not_ends_with: String
  tokenContract_not_ends_with_nocase: String
  tokenContract_: TokenContract_filter
  auctions_: Auction_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum AuctionContract_orderBy {
  id
  duration
  reservePrice
  timeBuffer
  minBidIncrement
  paused
  DAO
  tokenContract
  auctions
}

scalar BigDecimal

scalar BigInt

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

input BlockChangedFilter {
  number_gte: Int!
}

scalar Bytes

type DAO {
  id: ID!
  tokenContract: TokenContract!
  auctionContract: AuctionContract!
  metadataContract: MetadataContract!
  governorContract: GovernorContract!
  treasuryContract: TreasuryContract!
}

input DAO_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokenContract_: TokenContract_filter
  auctionContract_: AuctionContract_filter
  metadataContract_: MetadataContract_filter
  governorContract_: GovernorContract_filter
  treasuryContract_: TreasuryContract_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum DAO_orderBy {
  id
  tokenContract
  auctionContract
  metadataContract
  governorContract
  treasuryContract
}

type Delegation {
  id: ID!
  DAO: DAO!
  voter: Account!
  delegatedTo: Account!
}

input Delegation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  DAO: String
  DAO_not: String
  DAO_gt: String
  DAO_lt: String
  DAO_gte: String
  DAO_lte: String
  DAO_in: [String!]
  DAO_not_in: [String!]
  DAO_contains: String
  DAO_contains_nocase: String
  DAO_not_contains: String
  DAO_not_contains_nocase: String
  DAO_starts_with: String
  DAO_starts_with_nocase: String
  DAO_not_starts_with: String
  DAO_not_starts_with_nocase: String
  DAO_ends_with: String
  DAO_ends_with_nocase: String
  DAO_not_ends_with: String
  DAO_not_ends_with_nocase: String
  DAO_: DAO_filter
  voter: String
  voter_not: String
  voter_gt: String
  voter_lt: String
  voter_gte: String
  voter_lte: String
  voter_in: [String!]
  voter_not_in: [String!]
  voter_contains: String
  voter_contains_nocase: String
  voter_not_contains: String
  voter_not_contains_nocase: String
  voter_starts_with: String
  voter_starts_with_nocase: String
  voter_not_starts_with: String
  voter_not_starts_with_nocase: String
  voter_ends_with: String
  voter_ends_with_nocase: String
  voter_not_ends_with: String
  voter_not_ends_with_nocase: String
  voter_: Account_filter
  delegatedTo: String
  delegatedTo_not: String
  delegatedTo_gt: String
  delegatedTo_lt: String
  delegatedTo_gte: String
  delegatedTo_lte: String
  delegatedTo_in: [String!]
  delegatedTo_not_in: [String!]
  delegatedTo_contains: String
  delegatedTo_contains_nocase: String
  delegatedTo_not_contains: String
  delegatedTo_not_contains_nocase: String
  delegatedTo_starts_with: String
  delegatedTo_starts_with_nocase: String
  delegatedTo_not_starts_with: String
  delegatedTo_not_starts_with_nocase: String
  delegatedTo_ends_with: String
  delegatedTo_ends_with_nocase: String
  delegatedTo_not_ends_with: String
  delegatedTo_not_ends_with_nocase: String
  delegatedTo_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Delegation_orderBy {
  id
  DAO
  voter
  delegatedTo
}

type FounderInfo {
  id: ID!
  ownershipPercentage: BigInt!
  vestExpiry: BigInt!
  tokenContract: TokenContract!
  account: Account!
}

input FounderInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ownershipPercentage: BigInt
  ownershipPercentage_not: BigInt
  ownershipPercentage_gt: BigInt
  ownershipPercentage_lt: BigInt
  ownershipPercentage_gte: BigInt
  ownershipPercentage_lte: BigInt
  ownershipPercentage_in: [BigInt!]
  ownershipPercentage_not_in: [BigInt!]
  vestExpiry: BigInt
  vestExpiry_not: BigInt
  vestExpiry_gt: BigInt
  vestExpiry_lt: BigInt
  vestExpiry_gte: BigInt
  vestExpiry_lte: BigInt
  vestExpiry_in: [BigInt!]
  vestExpiry_not_in: [BigInt!]
  tokenContract: String
  tokenContract_not: String
  tokenContract_gt: String
  tokenContract_lt: String
  tokenContract_gte: String
  tokenContract_lte: String
  tokenContract_in: [String!]
  tokenContract_not_in: [String!]
  tokenContract_contains: String
  tokenContract_contains_nocase: String
  tokenContract_not_contains: String
  tokenContract_not_contains_nocase: String
  tokenContract_starts_with: String
  tokenContract_starts_with_nocase: String
  tokenContract_not_starts_with: String
  tokenContract_not_starts_with_nocase: String
  tokenContract_ends_with: String
  tokenContract_ends_with_nocase: String
  tokenContract_not_ends_with: String
  tokenContract_not_ends_with_nocase: String
  tokenContract_: TokenContract_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum FounderInfo_orderBy {
  id
  ownershipPercentage
  vestExpiry
  tokenContract
  account
}

type GovernorContract {
  id: ID!
  vetoEnabled: Boolean!
  vetoerAddress: Bytes!
  proposalThreshold: BigInt!
  quoromThreshold: BigInt!
  votingDelay: BigInt!
  votingPeriod: BigInt!
  proposals(skip: Int = 0, first: Int = 100, orderBy: Proposal_orderBy, orderDirection: OrderDirection, where: Proposal_filter): [Proposal!]!
  DAO: DAO!
}

input GovernorContract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  vetoEnabled: Boolean
  vetoEnabled_not: Boolean
  vetoEnabled_in: [Boolean!]
  vetoEnabled_not_in: [Boolean!]
  vetoerAddress: Bytes
  vetoerAddress_not: Bytes
  vetoerAddress_in: [Bytes!]
  vetoerAddress_not_in: [Bytes!]
  vetoerAddress_contains: Bytes
  vetoerAddress_not_contains: Bytes
  proposalThreshold: BigInt
  proposalThreshold_not: BigInt
  proposalThreshold_gt: BigInt
  proposalThreshold_lt: BigInt
  proposalThreshold_gte: BigInt
  proposalThreshold_lte: BigInt
  proposalThreshold_in: [BigInt!]
  proposalThreshold_not_in: [BigInt!]
  quoromThreshold: BigInt
  quoromThreshold_not: BigInt
  quoromThreshold_gt: BigInt
  quoromThreshold_lt: BigInt
  quoromThreshold_gte: BigInt
  quoromThreshold_lte: BigInt
  quoromThreshold_in: [BigInt!]
  quoromThreshold_not_in: [BigInt!]
  votingDelay: BigInt
  votingDelay_not: BigInt
  votingDelay_gt: BigInt
  votingDelay_lt: BigInt
  votingDelay_gte: BigInt
  votingDelay_lte: BigInt
  votingDelay_in: [BigInt!]
  votingDelay_not_in: [BigInt!]
  votingPeriod: BigInt
  votingPeriod_not: BigInt
  votingPeriod_gt: BigInt
  votingPeriod_lt: BigInt
  votingPeriod_gte: BigInt
  votingPeriod_lte: BigInt
  votingPeriod_in: [BigInt!]
  votingPeriod_not_in: [BigInt!]
  proposals_: Proposal_filter
  DAO: String
  DAO_not: String
  DAO_gt: String
  DAO_lt: String
  DAO_gte: String
  DAO_lte: String
  DAO_in: [String!]
  DAO_not_in: [String!]
  DAO_contains: String
  DAO_contains_nocase: String
  DAO_not_contains: String
  DAO_not_contains_nocase: String
  DAO_starts_with: String
  DAO_starts_with_nocase: String
  DAO_not_starts_with: String
  DAO_not_starts_with_nocase: String
  DAO_ends_with: String
  DAO_ends_with_nocase: String
  DAO_not_ends_with: String
  DAO_not_ends_with_nocase: String
  DAO_: DAO_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum GovernorContract_orderBy {
  id
  vetoEnabled
  vetoerAddress
  proposalThreshold
  quoromThreshold
  votingDelay
  votingPeriod
  proposals
  DAO
}

type MetadataContract {
  id: ID!
  websiteURL: String!
  description: String!
  contractImage: String!
  rendererBase: String!
  properties(skip: Int = 0, first: Int = 100, orderBy: Property_orderBy, orderDirection: OrderDirection, where: Property_filter): [Property!]!
  DAO: DAO!
}

input MetadataContract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  websiteURL: String
  websiteURL_not: String
  websiteURL_gt: String
  websiteURL_lt: String
  websiteURL_gte: String
  websiteURL_lte: String
  websiteURL_in: [String!]
  websiteURL_not_in: [String!]
  websiteURL_contains: String
  websiteURL_contains_nocase: String
  websiteURL_not_contains: String
  websiteURL_not_contains_nocase: String
  websiteURL_starts_with: String
  websiteURL_starts_with_nocase: String
  websiteURL_not_starts_with: String
  websiteURL_not_starts_with_nocase: String
  websiteURL_ends_with: String
  websiteURL_ends_with_nocase: String
  websiteURL_not_ends_with: String
  websiteURL_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  contractImage: String
  contractImage_not: String
  contractImage_gt: String
  contractImage_lt: String
  contractImage_gte: String
  contractImage_lte: String
  contractImage_in: [String!]
  contractImage_not_in: [String!]
  contractImage_contains: String
  contractImage_contains_nocase: String
  contractImage_not_contains: String
  contractImage_not_contains_nocase: String
  contractImage_starts_with: String
  contractImage_starts_with_nocase: String
  contractImage_not_starts_with: String
  contractImage_not_starts_with_nocase: String
  contractImage_ends_with: String
  contractImage_ends_with_nocase: String
  contractImage_not_ends_with: String
  contractImage_not_ends_with_nocase: String
  rendererBase: String
  rendererBase_not: String
  rendererBase_gt: String
  rendererBase_lt: String
  rendererBase_gte: String
  rendererBase_lte: String
  rendererBase_in: [String!]
  rendererBase_not_in: [String!]
  rendererBase_contains: String
  rendererBase_contains_nocase: String
  rendererBase_not_contains: String
  rendererBase_not_contains_nocase: String
  rendererBase_starts_with: String
  rendererBase_starts_with_nocase: String
  rendererBase_not_starts_with: String
  rendererBase_not_starts_with_nocase: String
  rendererBase_ends_with: String
  rendererBase_ends_with_nocase: String
  rendererBase_not_ends_with: String
  rendererBase_not_ends_with_nocase: String
  properties_: Property_filter
  DAO: String
  DAO_not: String
  DAO_gt: String
  DAO_lt: String
  DAO_gte: String
  DAO_lte: String
  DAO_in: [String!]
  DAO_not_in: [String!]
  DAO_contains: String
  DAO_contains_nocase: String
  DAO_not_contains: String
  DAO_not_contains_nocase: String
  DAO_starts_with: String
  DAO_starts_with_nocase: String
  DAO_not_starts_with: String
  DAO_not_starts_with_nocase: String
  DAO_ends_with: String
  DAO_ends_with_nocase: String
  DAO_not_ends_with: String
  DAO_not_ends_with_nocase: String
  DAO_: DAO_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum MetadataContract_orderBy {
  id
  websiteURL
  description
  contractImage
  rendererBase
  properties
  DAO
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Property {
  id: ID!
  name: String!
  metadataContract: MetadataContract!
}

input Property_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  metadataContract: String
  metadataContract_not: String
  metadataContract_gt: String
  metadataContract_lt: String
  metadataContract_gte: String
  metadataContract_lte: String
  metadataContract_in: [String!]
  metadataContract_not_in: [String!]
  metadataContract_contains: String
  metadataContract_contains_nocase: String
  metadataContract_not_contains: String
  metadataContract_not_contains_nocase: String
  metadataContract_starts_with: String
  metadataContract_starts_with_nocase: String
  metadataContract_not_starts_with: String
  metadataContract_not_starts_with_nocase: String
  metadataContract_ends_with: String
  metadataContract_ends_with_nocase: String
  metadataContract_not_ends_with: String
  metadataContract_not_ends_with_nocase: String
  metadataContract_: MetadataContract_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Property_orderBy {
  id
  name
  metadataContract
}

type Proposal {
  id: ID!
  description: String!
  descriptionHash: Bytes!
  status: ProposalStatus!
  targets: [String!]!
  values: [BigInt!]!
  calldatas: [Bytes!]!
  forVotes: BigInt!
  againstVotes: BigInt!
  abstainVotes: BigInt!
  governorContract: GovernorContract!
  submitter: Account!
  votes(skip: Int = 0, first: Int = 100, orderBy: Vote_orderBy, orderDirection: OrderDirection, where: Vote_filter): [Vote!]!
}

input Proposal_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  descriptionHash: Bytes
  descriptionHash_not: Bytes
  descriptionHash_in: [Bytes!]
  descriptionHash_not_in: [Bytes!]
  descriptionHash_contains: Bytes
  descriptionHash_not_contains: Bytes
  status: ProposalStatus
  status_not: ProposalStatus
  status_in: [ProposalStatus!]
  status_not_in: [ProposalStatus!]
  targets: [String!]
  targets_not: [String!]
  targets_contains: [String!]
  targets_contains_nocase: [String!]
  targets_not_contains: [String!]
  targets_not_contains_nocase: [String!]
  values: [BigInt!]
  values_not: [BigInt!]
  values_contains: [BigInt!]
  values_contains_nocase: [BigInt!]
  values_not_contains: [BigInt!]
  values_not_contains_nocase: [BigInt!]
  calldatas: [Bytes!]
  calldatas_not: [Bytes!]
  calldatas_contains: [Bytes!]
  calldatas_contains_nocase: [Bytes!]
  calldatas_not_contains: [Bytes!]
  calldatas_not_contains_nocase: [Bytes!]
  forVotes: BigInt
  forVotes_not: BigInt
  forVotes_gt: BigInt
  forVotes_lt: BigInt
  forVotes_gte: BigInt
  forVotes_lte: BigInt
  forVotes_in: [BigInt!]
  forVotes_not_in: [BigInt!]
  againstVotes: BigInt
  againstVotes_not: BigInt
  againstVotes_gt: BigInt
  againstVotes_lt: BigInt
  againstVotes_gte: BigInt
  againstVotes_lte: BigInt
  againstVotes_in: [BigInt!]
  againstVotes_not_in: [BigInt!]
  abstainVotes: BigInt
  abstainVotes_not: BigInt
  abstainVotes_gt: BigInt
  abstainVotes_lt: BigInt
  abstainVotes_gte: BigInt
  abstainVotes_lte: BigInt
  abstainVotes_in: [BigInt!]
  abstainVotes_not_in: [BigInt!]
  governorContract: String
  governorContract_not: String
  governorContract_gt: String
  governorContract_lt: String
  governorContract_gte: String
  governorContract_lte: String
  governorContract_in: [String!]
  governorContract_not_in: [String!]
  governorContract_contains: String
  governorContract_contains_nocase: String
  governorContract_not_contains: String
  governorContract_not_contains_nocase: String
  governorContract_starts_with: String
  governorContract_starts_with_nocase: String
  governorContract_not_starts_with: String
  governorContract_not_starts_with_nocase: String
  governorContract_ends_with: String
  governorContract_ends_with_nocase: String
  governorContract_not_ends_with: String
  governorContract_not_ends_with_nocase: String
  governorContract_: GovernorContract_filter
  submitter: String
  submitter_not: String
  submitter_gt: String
  submitter_lt: String
  submitter_gte: String
  submitter_lte: String
  submitter_in: [String!]
  submitter_not_in: [String!]
  submitter_contains: String
  submitter_contains_nocase: String
  submitter_not_contains: String
  submitter_not_contains_nocase: String
  submitter_starts_with: String
  submitter_starts_with_nocase: String
  submitter_not_starts_with: String
  submitter_not_starts_with_nocase: String
  submitter_ends_with: String
  submitter_ends_with_nocase: String
  submitter_not_ends_with: String
  submitter_not_ends_with_nocase: String
  submitter_: Account_filter
  votes_: Vote_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Proposal_orderBy {
  id
  description
  descriptionHash
  status
  targets
  values
  calldatas
  forVotes
  againstVotes
  abstainVotes
  governorContract
  submitter
  votes
}

enum ProposalStatus {
  PENDING
  ACTIVE
  CANCELLED
  VETOED
  QUEUED
  EXECUTED
}

type Query {
  dao(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DAO
  daos(
    skip: Int = 0
    first: Int = 100
    orderBy: DAO_orderBy
    orderDirection: OrderDirection
    where: DAO_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DAO!]!
  founderInfo(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FounderInfo
  founderInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: FounderInfo_orderBy
    orderDirection: OrderDirection
    where: FounderInfo_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FounderInfo!]!
  tokenContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenContract
  tokenContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenContract_orderBy
    orderDirection: OrderDirection
    where: TokenContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenContract!]!
  metadataContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MetadataContract
  metadataContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: MetadataContract_orderBy
    orderDirection: OrderDirection
    where: MetadataContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MetadataContract!]!
  auctionContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AuctionContract
  auctionContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: AuctionContract_orderBy
    orderDirection: OrderDirection
    where: AuctionContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AuctionContract!]!
  treasuryContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TreasuryContract
  treasuryContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: TreasuryContract_orderBy
    orderDirection: OrderDirection
    where: TreasuryContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TreasuryContract!]!
  governorContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GovernorContract
  governorContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: GovernorContract_orderBy
    orderDirection: OrderDirection
    where: GovernorContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GovernorContract!]!
  token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  auction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Auction
  auctions(
    skip: Int = 0
    first: Int = 100
    orderBy: Auction_orderBy
    orderDirection: OrderDirection
    where: Auction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Auction!]!
  auctionBid(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AuctionBid
  auctionBids(
    skip: Int = 0
    first: Int = 100
    orderBy: AuctionBid_orderBy
    orderDirection: OrderDirection
    where: AuctionBid_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AuctionBid!]!
  delegation(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Delegation
  delegations(
    skip: Int = 0
    first: Int = 100
    orderBy: Delegation_orderBy
    orderDirection: OrderDirection
    where: Delegation_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Delegation!]!
  property(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Property
  properties(
    skip: Int = 0
    first: Int = 100
    orderBy: Property_orderBy
    orderDirection: OrderDirection
    where: Property_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Property!]!
  proposal(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Proposal
  proposals(
    skip: Int = 0
    first: Int = 100
    orderBy: Proposal_orderBy
    orderDirection: OrderDirection
    where: Proposal_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Proposal!]!
  vote(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vote
  votes(
    skip: Int = 0
    first: Int = 100
    orderBy: Vote_orderBy
    orderDirection: OrderDirection
    where: Vote_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vote!]!
  treasuryTransaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TreasuryTransaction
  treasuryTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: TreasuryTransaction_orderBy
    orderDirection: OrderDirection
    where: TreasuryTransaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TreasuryTransaction!]!
  account(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  dao(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DAO
  daos(
    skip: Int = 0
    first: Int = 100
    orderBy: DAO_orderBy
    orderDirection: OrderDirection
    where: DAO_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DAO!]!
  founderInfo(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FounderInfo
  founderInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: FounderInfo_orderBy
    orderDirection: OrderDirection
    where: FounderInfo_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FounderInfo!]!
  tokenContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenContract
  tokenContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenContract_orderBy
    orderDirection: OrderDirection
    where: TokenContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenContract!]!
  metadataContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MetadataContract
  metadataContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: MetadataContract_orderBy
    orderDirection: OrderDirection
    where: MetadataContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MetadataContract!]!
  auctionContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AuctionContract
  auctionContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: AuctionContract_orderBy
    orderDirection: OrderDirection
    where: AuctionContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AuctionContract!]!
  treasuryContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TreasuryContract
  treasuryContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: TreasuryContract_orderBy
    orderDirection: OrderDirection
    where: TreasuryContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TreasuryContract!]!
  governorContract(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GovernorContract
  governorContracts(
    skip: Int = 0
    first: Int = 100
    orderBy: GovernorContract_orderBy
    orderDirection: OrderDirection
    where: GovernorContract_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GovernorContract!]!
  token(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  auction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Auction
  auctions(
    skip: Int = 0
    first: Int = 100
    orderBy: Auction_orderBy
    orderDirection: OrderDirection
    where: Auction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Auction!]!
  auctionBid(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AuctionBid
  auctionBids(
    skip: Int = 0
    first: Int = 100
    orderBy: AuctionBid_orderBy
    orderDirection: OrderDirection
    where: AuctionBid_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AuctionBid!]!
  delegation(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Delegation
  delegations(
    skip: Int = 0
    first: Int = 100
    orderBy: Delegation_orderBy
    orderDirection: OrderDirection
    where: Delegation_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Delegation!]!
  property(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Property
  properties(
    skip: Int = 0
    first: Int = 100
    orderBy: Property_orderBy
    orderDirection: OrderDirection
    where: Property_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Property!]!
  proposal(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Proposal
  proposals(
    skip: Int = 0
    first: Int = 100
    orderBy: Proposal_orderBy
    orderDirection: OrderDirection
    where: Proposal_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Proposal!]!
  vote(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Vote
  votes(
    skip: Int = 0
    first: Int = 100
    orderBy: Vote_orderBy
    orderDirection: OrderDirection
    where: Vote_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Vote!]!
  treasuryTransaction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TreasuryTransaction
  treasuryTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: TreasuryTransaction_orderBy
    orderDirection: OrderDirection
    where: TreasuryTransaction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TreasuryTransaction!]!
  account(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Token {
  id: ID!
  tokenId: BigInt!
  tokenURI: String!
  tokenContract: TokenContract!
  auction: Auction!
  owner: Account!
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  tokenURI: String
  tokenURI_not: String
  tokenURI_gt: String
  tokenURI_lt: String
  tokenURI_gte: String
  tokenURI_lte: String
  tokenURI_in: [String!]
  tokenURI_not_in: [String!]
  tokenURI_contains: String
  tokenURI_contains_nocase: String
  tokenURI_not_contains: String
  tokenURI_not_contains_nocase: String
  tokenURI_starts_with: String
  tokenURI_starts_with_nocase: String
  tokenURI_not_starts_with: String
  tokenURI_not_starts_with_nocase: String
  tokenURI_ends_with: String
  tokenURI_ends_with_nocase: String
  tokenURI_not_ends_with: String
  tokenURI_not_ends_with_nocase: String
  tokenContract: String
  tokenContract_not: String
  tokenContract_gt: String
  tokenContract_lt: String
  tokenContract_gte: String
  tokenContract_lte: String
  tokenContract_in: [String!]
  tokenContract_not_in: [String!]
  tokenContract_contains: String
  tokenContract_contains_nocase: String
  tokenContract_not_contains: String
  tokenContract_not_contains_nocase: String
  tokenContract_starts_with: String
  tokenContract_starts_with_nocase: String
  tokenContract_not_starts_with: String
  tokenContract_not_starts_with_nocase: String
  tokenContract_ends_with: String
  tokenContract_ends_with_nocase: String
  tokenContract_not_ends_with: String
  tokenContract_not_ends_with_nocase: String
  tokenContract_: TokenContract_filter
  auction: String
  auction_not: String
  auction_gt: String
  auction_lt: String
  auction_gte: String
  auction_lte: String
  auction_in: [String!]
  auction_not_in: [String!]
  auction_contains: String
  auction_contains_nocase: String
  auction_not_contains: String
  auction_not_contains_nocase: String
  auction_starts_with: String
  auction_starts_with_nocase: String
  auction_not_starts_with: String
  auction_not_starts_with_nocase: String
  auction_ends_with: String
  auction_ends_with_nocase: String
  auction_not_ends_with: String
  auction_not_ends_with_nocase: String
  auction_: Auction_filter
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Token_orderBy {
  id
  tokenId
  tokenURI
  tokenContract
  auction
  owner
}

type TokenContract {
  id: ID!
  name: String!
  symbol: String!
  totalSupply: BigInt!
  contractURI: String!
  DAO: DAO!
  auctionContract: AuctionContract!
  founders(skip: Int = 0, first: Int = 100, orderBy: FounderInfo_orderBy, orderDirection: OrderDirection, where: FounderInfo_filter): [FounderInfo!]!
  tokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]!
}

input TokenContract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  contractURI: String
  contractURI_not: String
  contractURI_gt: String
  contractURI_lt: String
  contractURI_gte: String
  contractURI_lte: String
  contractURI_in: [String!]
  contractURI_not_in: [String!]
  contractURI_contains: String
  contractURI_contains_nocase: String
  contractURI_not_contains: String
  contractURI_not_contains_nocase: String
  contractURI_starts_with: String
  contractURI_starts_with_nocase: String
  contractURI_not_starts_with: String
  contractURI_not_starts_with_nocase: String
  contractURI_ends_with: String
  contractURI_ends_with_nocase: String
  contractURI_not_ends_with: String
  contractURI_not_ends_with_nocase: String
  DAO: String
  DAO_not: String
  DAO_gt: String
  DAO_lt: String
  DAO_gte: String
  DAO_lte: String
  DAO_in: [String!]
  DAO_not_in: [String!]
  DAO_contains: String
  DAO_contains_nocase: String
  DAO_not_contains: String
  DAO_not_contains_nocase: String
  DAO_starts_with: String
  DAO_starts_with_nocase: String
  DAO_not_starts_with: String
  DAO_not_starts_with_nocase: String
  DAO_ends_with: String
  DAO_ends_with_nocase: String
  DAO_not_ends_with: String
  DAO_not_ends_with_nocase: String
  DAO_: DAO_filter
  auctionContract: String
  auctionContract_not: String
  auctionContract_gt: String
  auctionContract_lt: String
  auctionContract_gte: String
  auctionContract_lte: String
  auctionContract_in: [String!]
  auctionContract_not_in: [String!]
  auctionContract_contains: String
  auctionContract_contains_nocase: String
  auctionContract_not_contains: String
  auctionContract_not_contains_nocase: String
  auctionContract_starts_with: String
  auctionContract_starts_with_nocase: String
  auctionContract_not_starts_with: String
  auctionContract_not_starts_with_nocase: String
  auctionContract_ends_with: String
  auctionContract_ends_with_nocase: String
  auctionContract_not_ends_with: String
  auctionContract_not_ends_with_nocase: String
  auctionContract_: AuctionContract_filter
  founders_: FounderInfo_filter
  tokens_: Token_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum TokenContract_orderBy {
  id
  name
  symbol
  totalSupply
  contractURI
  DAO
  auctionContract
  founders
  tokens
}

type TreasuryContract {
  id: ID!
  delay: BigInt!
  gracePeriod: BigInt!
  DAO: DAO!
  transactions(skip: Int = 0, first: Int = 100, orderBy: TreasuryTransaction_orderBy, orderDirection: OrderDirection, where: TreasuryTransaction_filter): [TreasuryTransaction!]!
}

input TreasuryContract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  delay: BigInt
  delay_not: BigInt
  delay_gt: BigInt
  delay_lt: BigInt
  delay_gte: BigInt
  delay_lte: BigInt
  delay_in: [BigInt!]
  delay_not_in: [BigInt!]
  gracePeriod: BigInt
  gracePeriod_not: BigInt
  gracePeriod_gt: BigInt
  gracePeriod_lt: BigInt
  gracePeriod_gte: BigInt
  gracePeriod_lte: BigInt
  gracePeriod_in: [BigInt!]
  gracePeriod_not_in: [BigInt!]
  DAO: String
  DAO_not: String
  DAO_gt: String
  DAO_lt: String
  DAO_gte: String
  DAO_lte: String
  DAO_in: [String!]
  DAO_not_in: [String!]
  DAO_contains: String
  DAO_contains_nocase: String
  DAO_not_contains: String
  DAO_not_contains_nocase: String
  DAO_starts_with: String
  DAO_starts_with_nocase: String
  DAO_not_starts_with: String
  DAO_not_starts_with_nocase: String
  DAO_ends_with: String
  DAO_ends_with_nocase: String
  DAO_not_ends_with: String
  DAO_not_ends_with_nocase: String
  DAO_: DAO_filter
  transactions_: TreasuryTransaction_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum TreasuryContract_orderBy {
  id
  delay
  gracePeriod
  DAO
  transactions
}

type TreasuryTransaction {
  id: ID!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  treasuryContract: TreasuryContract!
  proposal: Proposal!
}

input TreasuryTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  treasuryContract: String
  treasuryContract_not: String
  treasuryContract_gt: String
  treasuryContract_lt: String
  treasuryContract_gte: String
  treasuryContract_lte: String
  treasuryContract_in: [String!]
  treasuryContract_not_in: [String!]
  treasuryContract_contains: String
  treasuryContract_contains_nocase: String
  treasuryContract_not_contains: String
  treasuryContract_not_contains_nocase: String
  treasuryContract_starts_with: String
  treasuryContract_starts_with_nocase: String
  treasuryContract_not_starts_with: String
  treasuryContract_not_starts_with_nocase: String
  treasuryContract_ends_with: String
  treasuryContract_ends_with_nocase: String
  treasuryContract_not_ends_with: String
  treasuryContract_not_ends_with_nocase: String
  treasuryContract_: TreasuryContract_filter
  proposal: String
  proposal_not: String
  proposal_gt: String
  proposal_lt: String
  proposal_gte: String
  proposal_lte: String
  proposal_in: [String!]
  proposal_not_in: [String!]
  proposal_contains: String
  proposal_contains_nocase: String
  proposal_not_contains: String
  proposal_not_contains_nocase: String
  proposal_starts_with: String
  proposal_starts_with_nocase: String
  proposal_not_starts_with: String
  proposal_not_starts_with_nocase: String
  proposal_ends_with: String
  proposal_ends_with_nocase: String
  proposal_not_ends_with: String
  proposal_not_ends_with_nocase: String
  proposal_: Proposal_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum TreasuryTransaction_orderBy {
  id
  blockNumber
  blockTimestamp
  transactionHash
  treasuryContract
  proposal
}

type Vote {
  id: ID!
  supported: VoteType!
  reason: String!
  weight: BigInt!
  proposal: Proposal!
  voter: Account!
}

input Vote_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  supported: VoteType
  supported_not: VoteType
  supported_in: [VoteType!]
  supported_not_in: [VoteType!]
  reason: String
  reason_not: String
  reason_gt: String
  reason_lt: String
  reason_gte: String
  reason_lte: String
  reason_in: [String!]
  reason_not_in: [String!]
  reason_contains: String
  reason_contains_nocase: String
  reason_not_contains: String
  reason_not_contains_nocase: String
  reason_starts_with: String
  reason_starts_with_nocase: String
  reason_not_starts_with: String
  reason_not_starts_with_nocase: String
  reason_ends_with: String
  reason_ends_with_nocase: String
  reason_not_ends_with: String
  reason_not_ends_with_nocase: String
  weight: BigInt
  weight_not: BigInt
  weight_gt: BigInt
  weight_lt: BigInt
  weight_gte: BigInt
  weight_lte: BigInt
  weight_in: [BigInt!]
  weight_not_in: [BigInt!]
  proposal: String
  proposal_not: String
  proposal_gt: String
  proposal_lt: String
  proposal_gte: String
  proposal_lte: String
  proposal_in: [String!]
  proposal_not_in: [String!]
  proposal_contains: String
  proposal_contains_nocase: String
  proposal_not_contains: String
  proposal_not_contains_nocase: String
  proposal_starts_with: String
  proposal_starts_with_nocase: String
  proposal_not_starts_with: String
  proposal_not_starts_with_nocase: String
  proposal_ends_with: String
  proposal_ends_with_nocase: String
  proposal_not_ends_with: String
  proposal_not_ends_with_nocase: String
  proposal_: Proposal_filter
  voter: String
  voter_not: String
  voter_gt: String
  voter_lt: String
  voter_gte: String
  voter_lte: String
  voter_in: [String!]
  voter_not_in: [String!]
  voter_contains: String
  voter_contains_nocase: String
  voter_not_contains: String
  voter_not_contains_nocase: String
  voter_starts_with: String
  voter_starts_with_nocase: String
  voter_not_starts_with: String
  voter_not_starts_with_nocase: String
  voter_ends_with: String
  voter_ends_with_nocase: String
  voter_not_ends_with: String
  voter_not_ends_with_nocase: String
  voter_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Vote_orderBy {
  id
  supported
  reason
  weight
  proposal
  voter
}

enum VoteType {
  FOR
  AGAINST
  ABSTAIN
}

